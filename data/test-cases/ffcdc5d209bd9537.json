{"uid":"ffcdc5d209bd9537","name":"Text Box test","fullName":"tests.elements_test.TestTextBox#test_text_box","historyId":"e84c8d35e536e1b8a8e026355b828cdc","time":{"start":1746943716238,"stop":1746943720544,"duration":4306},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"submit\" type=\"button\" class=\"btn btn-primary\">...</button> is not clickable at point (560, 396). Other element would receive the click: <iframe id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-Anchor_0\" name=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-Anchor_0\" title=\"3rd party ad content\" width=\"728\" height=\"90\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\" aria-label=\"Advertisement\" tabindex=\"0\" allow=\"private-state-token-redemption;attribution-reporting\" data-load-complete=\"true\" style=\"border: 0px; vertical-align: bottom;\" data-google-container-id=\"1\"></iframe>\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x55e3b344e75a <unknown>\n#1 0x55e3b2f014b0 <unknown>\n#2 0x55e3b2f597dc <unknown>\n#3 0x55e3b2f57645 <unknown>\n#4 0x55e3b2f54ce2 <unknown>\n#5 0x55e3b2f543e0 <unknown>\n#6 0x55e3b2f469ed <unknown>\n#7 0x55e3b2f78592 <unknown>\n#8 0x55e3b2f4636a <unknown>\n#9 0x55e3b2f7875e <unknown>\n#10 0x55e3b2f9e5e0 <unknown>\n#11 0x55e3b2f78363 <unknown>\n#12 0x55e3b2f44d63 <unknown>\n#13 0x55e3b2f459c1 <unknown>\n#14 0x55e3b3413a6b <unknown>\n#15 0x55e3b3417951 <unknown>\n#16 0x55e3b33fbb62 <unknown>\n#17 0x55e3b34184c4 <unknown>\n#18 0x55e3b33e013f <unknown>\n#19 0x55e3b343c6f8 <unknown>\n#20 0x55e3b343c8d6 <unknown>\n#21 0x55e3b344d5a6 <unknown>\n#22 0x7fd4b2c9caa4 <unknown>\n#23 0x7fd4b2d29c3c <unknown>","statusTrace":"self = <elements_test.TestElementsPage.TestTextBox object at 0x7fd511898dd0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dc15362ea825dd8c0aa95698f88913ae\")>\n\n    @allure.title(\"Text Box test\")\n    # @pytest.mark.usefixtures(\"chrome_only\")\n    def test_text_box(self, driver):\n        text_box_page = TextBoxPage(driver, 'https://demoqa.com/text-box')\n        text_box_page.open()\n>       full_name, email, current_address, permanent_address = text_box_page.fill_all_fields()\n\ntests/elements_test.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/elements_page.py:32: in fill_all_fields\n    self.element_is_visible(self.locators.SUBMIT).click()\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd5118bc980>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55e3b344d5a6 \\\\u003Cunknown>\\\\n#22 0x7fd4b2c9caa4 \\\\u003Cunknown>\\\\n#23 0x7fd4b2d29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"submit\" type=\"button\" class=\"btn btn-primary\">...</button> is not clickable at point (560, 396). Other element would receive the click: <iframe id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-Anchor_0\" name=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-Anchor_0\" title=\"3rd party ad content\" width=\"728\" height=\"90\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\" aria-label=\"Advertisement\" tabindex=\"0\" allow=\"private-state-token-redemption;attribution-reporting\" data-load-complete=\"true\" style=\"border: 0px; vertical-align: bottom;\" data-google-container-id=\"1\"></iframe>\nE         (Session info: chrome=135.0.7049.114)\nE       Stacktrace:\nE       #0 0x55e3b344e75a <unknown>\nE       #1 0x55e3b2f014b0 <unknown>\nE       #2 0x55e3b2f597dc <unknown>\nE       #3 0x55e3b2f57645 <unknown>\nE       #4 0x55e3b2f54ce2 <unknown>\nE       #5 0x55e3b2f543e0 <unknown>\nE       #6 0x55e3b2f469ed <unknown>\nE       #7 0x55e3b2f78592 <unknown>\nE       #8 0x55e3b2f4636a <unknown>\nE       #9 0x55e3b2f7875e <unknown>\nE       #10 0x55e3b2f9e5e0 <unknown>\nE       #11 0x55e3b2f78363 <unknown>\nE       #12 0x55e3b2f44d63 <unknown>\nE       #13 0x55e3b2f459c1 <unknown>\nE       #14 0x55e3b3413a6b <unknown>\nE       #15 0x55e3b3417951 <unknown>\nE       #16 0x55e3b33fbb62 <unknown>\nE       #17 0x55e3b34184c4 <unknown>\nE       #18 0x55e3b33e013f <unknown>\nE       #19 0x55e3b343c6f8 <unknown>\nE       #20 0x55e3b343c8d6 <unknown>\nE       #21 0x55e3b344d5a6 <unknown>\nE       #22 0x7fd4b2c9caa4 <unknown>\nE       #23 0x7fd4b2d29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1746943642525,"stop":1746943642541,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1746943715855,"stop":1746943716237,"duration":382},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[{"name":"driver::0","time":{"start":1746943720583,"stop":1746943720682,"duration":99},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Text Box"},{"name":"suite","value":"Elements Page"},{"name":"parentSuite","value":"tests"},{"name":"subSuite","value":"TestElementsPage"},{"name":"host","value":"pkrvmberfyhpb9w"},{"name":"thread","value":"2423-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.elements_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ffcdc5d209bd9537.json","parameterValues":[]}