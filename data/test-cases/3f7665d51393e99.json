{"uid":"3f7665d51393e99","name":"Check all menu items are displayed correctly","fullName":"tests.widgets_test.TestMenuPage#test_menu_items","historyId":"a01d87562daade79c971dc0a8e17cb4b","time":{"start":1746944251687,"stop":1746944254026,"duration":2339},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: https://demoqa.com/menu# has no size and location\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x55e92ec4875a <unknown>\n#1 0x55e92e6fb4b0 <unknown>\n#2 0x55e92e7020b6 <unknown>\n#3 0x55e92e704928 <unknown>\n#4 0x55e92e7049b3 <unknown>\n#5 0x55e92e752cec <unknown>\n#6 0x55e92e7520a2 <unknown>\n#7 0x55e92e7a0b93 <unknown>\n#8 0x55e92e772592 <unknown>\n#9 0x55e92e7985e0 <unknown>\n#10 0x55e92e772363 <unknown>\n#11 0x55e92e73ed63 <unknown>\n#12 0x55e92e73f9c1 <unknown>\n#13 0x55e92ec0da6b <unknown>\n#14 0x55e92ec11951 <unknown>\n#15 0x55e92ebf5b62 <unknown>\n#16 0x55e92ec124c4 <unknown>\n#17 0x55e92ebda13f <unknown>\n#18 0x55e92ec366f8 <unknown>\n#19 0x55e92ec368d6 <unknown>\n#20 0x55e92ec475a6 <unknown>\n#21 0x7f356029caa4 <unknown>\n#22 0x7f3560329c3c <unknown>","statusTrace":"self = <widgets_test.TestMenuPage object at 0x7fd5118ac200>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a1ea67cdca7dc907274c2e6cfe6b4eb6\")>\n\n    @allure.title('Check all menu items are displayed correctly')\n    def test_menu_items(self, driver):\n        menu_page = MenuPage(driver, \"https://demoqa.com/menu\")\n        menu_page.open()\n>       result = menu_page.check_menu()\n\ntests/widgets_test.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/widgets_page.py:223: in check_menu\n    self.action_move_to_element(item)\npages/base_page.py:171: in action_move_to_element\n    action.perform()\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/common/action_chains.py:94: in perform\n    self.w3c_actions.perform()\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/common/actions/action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd5118e6f00>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: https://de...\\\\n#20 0x55e92ec475a6 \\\\u003Cunknown>\\\\n#21 0x7f356029caa4 \\\\u003Cunknown>\\\\n#22 0x7f3560329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: https://demoqa.com/menu# has no size and location\nE         (Session info: chrome=135.0.7049.114)\nE       Stacktrace:\nE       #0 0x55e92ec4875a <unknown>\nE       #1 0x55e92e6fb4b0 <unknown>\nE       #2 0x55e92e7020b6 <unknown>\nE       #3 0x55e92e704928 <unknown>\nE       #4 0x55e92e7049b3 <unknown>\nE       #5 0x55e92e752cec <unknown>\nE       #6 0x55e92e7520a2 <unknown>\nE       #7 0x55e92e7a0b93 <unknown>\nE       #8 0x55e92e772592 <unknown>\nE       #9 0x55e92e7985e0 <unknown>\nE       #10 0x55e92e772363 <unknown>\nE       #11 0x55e92e73ed63 <unknown>\nE       #12 0x55e92e73f9c1 <unknown>\nE       #13 0x55e92ec0da6b <unknown>\nE       #14 0x55e92ec11951 <unknown>\nE       #15 0x55e92ebf5b62 <unknown>\nE       #16 0x55e92ec124c4 <unknown>\nE       #17 0x55e92ebda13f <unknown>\nE       #18 0x55e92ec366f8 <unknown>\nE       #19 0x55e92ec368d6 <unknown>\nE       #20 0x55e92ec475a6 <unknown>\nE       #21 0x7f356029caa4 <unknown>\nE       #22 0x7f3560329c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1746943642525,"stop":1746943642541,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1746944251313,"stop":1746944251687,"duration":374},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: https://demoqa.com/menu# has no size and location\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x55e92ec4875a <unknown>\n#1 0x55e92e6fb4b0 <unknown>\n#2 0x55e92e7020b6 <unknown>\n#3 0x55e92e704928 <unknown>\n#4 0x55e92e7049b3 <unknown>\n#5 0x55e92e752cec <unknown>\n#6 0x55e92e7520a2 <unknown>\n#7 0x55e92e7a0b93 <unknown>\n#8 0x55e92e772592 <unknown>\n#9 0x55e92e7985e0 <unknown>\n#10 0x55e92e772363 <unknown>\n#11 0x55e92e73ed63 <unknown>\n#12 0x55e92e73f9c1 <unknown>\n#13 0x55e92ec0da6b <unknown>\n#14 0x55e92ec11951 <unknown>\n#15 0x55e92ebf5b62 <unknown>\n#16 0x55e92ec124c4 <unknown>\n#17 0x55e92ebda13f <unknown>\n#18 0x55e92ec366f8 <unknown>\n#19 0x55e92ec368d6 <unknown>\n#20 0x55e92ec475a6 <unknown>\n#21 0x7f356029caa4 <unknown>\n#22 0x7f3560329c3c <unknown>","statusTrace":"self = <widgets_test.TestMenuPage object at 0x7fd5118ac200>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a1ea67cdca7dc907274c2e6cfe6b4eb6\")>\n\n    @allure.title('Check all menu items are displayed correctly')\n    def test_menu_items(self, driver):\n        menu_page = MenuPage(driver, \"https://demoqa.com/menu\")\n        menu_page.open()\n>       result = menu_page.check_menu()\n\ntests/widgets_test.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/widgets_page.py:223: in check_menu\n    self.action_move_to_element(item)\npages/base_page.py:171: in action_move_to_element\n    action.perform()\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/common/action_chains.py:94: in perform\n    self.w3c_actions.perform()\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/common/actions/action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd5118e6f00>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: https://de...\\\\n#20 0x55e92ec475a6 \\\\u003Cunknown>\\\\n#21 0x7f356029caa4 \\\\u003Cunknown>\\\\n#22 0x7f3560329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: https://demoqa.com/menu# has no size and location\nE         (Session info: chrome=135.0.7049.114)\nE       Stacktrace:\nE       #0 0x55e92ec4875a <unknown>\nE       #1 0x55e92e6fb4b0 <unknown>\nE       #2 0x55e92e7020b6 <unknown>\nE       #3 0x55e92e704928 <unknown>\nE       #4 0x55e92e7049b3 <unknown>\nE       #5 0x55e92e752cec <unknown>\nE       #6 0x55e92e7520a2 <unknown>\nE       #7 0x55e92e7a0b93 <unknown>\nE       #8 0x55e92e772592 <unknown>\nE       #9 0x55e92e7985e0 <unknown>\nE       #10 0x55e92e772363 <unknown>\nE       #11 0x55e92e73ed63 <unknown>\nE       #12 0x55e92e73f9c1 <unknown>\nE       #13 0x55e92ec0da6b <unknown>\nE       #14 0x55e92ec11951 <unknown>\nE       #15 0x55e92ebf5b62 <unknown>\nE       #16 0x55e92ec124c4 <unknown>\nE       #17 0x55e92ebda13f <unknown>\nE       #18 0x55e92ec366f8 <unknown>\nE       #19 0x55e92ec368d6 <unknown>\nE       #20 0x55e92ec475a6 <unknown>\nE       #21 0x7f356029caa4 <unknown>\nE       #22 0x7f3560329c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"check menu item","time":{"start":1746944253015,"stop":1746944254026,"duration":1011},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: https://demoqa.com/menu# has no size and location\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x55e92ec4875a <unknown>\n#1 0x55e92e6fb4b0 <unknown>\n#2 0x55e92e7020b6 <unknown>\n#3 0x55e92e704928 <unknown>\n#4 0x55e92e7049b3 <unknown>\n#5 0x55e92e752cec <unknown>\n#6 0x55e92e7520a2 <unknown>\n#7 0x55e92e7a0b93 <unknown>\n#8 0x55e92e772592 <unknown>\n#9 0x55e92e7985e0 <unknown>\n#10 0x55e92e772363 <unknown>\n#11 0x55e92e73ed63 <unknown>\n#12 0x55e92e73f9c1 <unknown>\n#13 0x55e92ec0da6b <unknown>\n#14 0x55e92ec11951 <unknown>\n#15 0x55e92ebf5b62 <unknown>\n#16 0x55e92ec124c4 <unknown>\n#17 0x55e92ebda13f <unknown>\n#18 0x55e92ec366f8 <unknown>\n#19 0x55e92ec368d6 <unknown>\n#20 0x55e92ec475a6 <unknown>\n#21 0x7f356029caa4 <unknown>\n#22 0x7f3560329c3c <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/WebAutotestsPOM/WebAutotestsPOM/pages/widgets_page.py\", line 223, in check_menu\n    self.action_move_to_element(item)\n  File \"/home/runner/work/WebAutotestsPOM/WebAutotestsPOM/pages/base_page.py\", line 171, in action_move_to_element\n    action.perform()\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/common/action_chains.py\", line 94, in perform\n    self.w3c_actions.perform()\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/common/actions/action_builder.py\", line 96, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1746944254064,"stop":1746944254130,"duration":66},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"MenuPage"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"widgets_test"},{"name":"subSuite","value":"TestMenuPage"},{"name":"host","value":"pkrvmberfyhpb9w"},{"name":"thread","value":"2423-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.widgets_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"3f7665d51393e99.json","parameterValues":[]}